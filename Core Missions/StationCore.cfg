CONTRACT_TYPE
{
    name = StationCore
    group = BasesandStations
    title = Launch the @/targetBody1 Space Station!
	genericTitle = Launch a new Space Station.
    description = In order to aid our efforts of exploring @/targetBody1 we'd like you to launch a space station.
	genericDescription = We'd like you to deploy a new space station.
    synopsis = Launch the @/targetBody1 Space Station!
    completedMessage = Station Complete!
    // Contract min/max expiry in days.
    minExpiry = 1
    maxExpiry = 7
    // Contract can be cancelled and declined.
    cancellable = true
    declinable = true
    targetBody = @/targetBody1

    // Contract rewards - no science random other rewards.
    rewardScience = 0
    rewardReputation = Random(1.0, 10.0)
    rewardFunds = Random(150000.0, 300000.0)
    failureReputation = Random(1.0, 100.0)
    failureFunds = 50000.0
    advanceFunds = 50000.0

    // Failsafe Data.
    DATA
    {
        type = List<Vessel>
		requiredValue = false
        stations = AllVessels().Where(v => v.VesselType() == Station)
    }
    DATA
    {
        type = CelestialBody
        requiredValue = true
        uniquenessCheck = CONTRACT_ACTIVE
        targetBody1 = OrbitedBodies().Where(body => @/stations.Where(v => v.CelestialBody() == body).Count() == 0).SelectUnique()
		title = Must have orbited a Celestial Body, but not have any stations deployed.
    }


    //Define the new station.
    PARAMETER
    {
        name = NewStation
        type = VesselParameterGroup
        title = Launch a new Station Core into the specified orbit around @/targetBody1.
        notes = The station must include 1 Docking Port and support 4 Kerbals.  This can be done in one launch, or multiple launches.

        PARAMETER
        {
            name = LKO
            type = Orbit
            targetBody = @/targetBody1
            situation = ORBITING
            maxAltitude = @/targetBody1.IsSun() ? 113549713200 : @/targetBody1 == Gilly ? 16000 : @/targetBody1.SpaceAltitudeThreshold()
        }

        //Check for a Docking Port
      PARAMETER
{
    name = PartValidation
    type = PartValidation
	partModule = ModuleDockingNode
	minCount = 1
	}

        PARAMETER
        {
            name = HabModuleChild
            type = HasCrewCapacity

            // Minimum count, default = 1
            minCapacity = 4
            title = Support 4 Kerbals
        }

        PARAMETER
        {
            name = RTGSolar
            type = Any
            title = Have one of the following power generators

            PARAMETER
            {
                name = PartValidationRTG
                type = PartValidation
                hideChildren = true
                title = 1 or more solar panels

                // PartModule(s) to check for.  Optional, and can be specified multiple times.
                partModule = ModuleDeployableSolarPanel

                // Minimum count, default = 1
                minCount = 1
            }
                
            PARAMETER
            {
                name = PartValidationSolar
                type = PartValidation
                hideChildren = true
                title = 1 or more generators

                // PartModule(s) to check for.  Optional, and can be specified multiple times. Looking for an RTG
                partModule = ModuleGenerator

                // Minimum count, default = 1
                minCount = 1
            }
	    
            REQUIREMENT:NEEDS[Kopernicus]
	        {
	            name = PartValidationKopernicus
	            type = PartModuleUnlocked
		    title = 1 or more solar panels
	            partModule = KopernicusSolarPanel
	        }
			PARAMETER:NEEDS[NearFutureSolar]
			{
			name = PartValidationNearFutureSolar
			type = PartValidation
			title = 1 or more curved solar panels
			hideChildren = true
			partModule = ModuleCurvedSolarPanel
			minCount = 1
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
			name = PartValidationNearFutureReactors
			type = PartValidation
			title = 1 or more fission reactors
			hideChildren = true
			partModule = FissionReactor
			minCount = 1
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
			name = PartValidationNearFutureRTGs
			type = PartValidation
			title = 1 or more radioisotope generators
			hideChildren = true
			partModule = ModuleRadioisotopeGenerator
			minCount = 1
			}
        }

        PARAMETER:NEEDS[!StationScience&!Kerbalism]
        {
            name = ScienceLab
            type = PartValidation
            title = Have a Science Lab on board

            hideChildren = true
            // The name of the part to check for. Optional.
            partModule = ModuleScienceLab
        }

        PARAMETER:NEEDS[StationScience]
        {
            name = StationScienceSupport
            type = Any
            title = Have any type of Science Lab on board

            PARAMETER
            {
                name = PartValidation
                type = PartValidation
                title = 1 or more standard science labs
                hideChildren = true

                // The name of the part to check for. Optional.
                partModule = ModuleScienceLab
            }

            PARAMETER
            {
                name = PartValidation
                type = PartValidation
                title = 1 or more research facilities
                hideChildren = true

                // The name of the part to check for. Optional.
                partModule = StationScienceModule
                title = Station Science Lab
            }
        }
		
		PARAMETER:NEEDS[Kerbalism]
        {
            name = KerbalismSupport
            type = Any
            title = Have any type of Science Lab on board

            PARAMETER
            {
                name = PartValidation
                type = PartValidation
                title = 1 or more standard science labs
                hideChildren = true

                // The name of the part to check for. Optional.
                partModule = ModuleScienceLab
            }

            PARAMETER
            {
                name = PartValidation
                type = PartValidation
                title = 1 or more research facilities
                hideChildren = true

                // The name of the part to check for. Optional.
                partModule = Laboratory
                title = Kerbalism Laboratory
            }
        }

        PARAMETER
        {
            name = PartValidation
            type = PartValidation
            hideChildren = true
			optional = true
            
            part = cupola
            minCount = 1
            title = Include a cupola (optional)
        }
		PARAMETER
	{
    name = VesselIsType
    type = VesselIsType
	vesselType = Station
    }
}

	REQUIREMENT
{
    name = PartModuleUnlocked
    type = PartModuleUnlocked

    // PartModule that needs to be unlocked.  May be specified multiple
    // times.
    partModule = ModuleDockingNode
	}
	
REQUIREMENT
{
name = Any
type = Any
	REQUIREMENT
	{
    name = PartModuleUnlocked
    type = PartModuleUnlocked
	partModule = ModuleDeployableSolarPanel
	}

	REQUIREMENT:NEEDS[NearFutureSolar]
	{
	name = PartModuleUnlocked
	type = PartModuleUnlocked
	partModule = ModuleCurvedSolarPanel
	}	
}

//check a Science Lab is unlocked	
	REQUIREMENT
    {
		name = Any
		type = Any
	
	REQUIREMENT
{
    name = PartModuleUnlocked
    type = PartModuleUnlocked
	checkOnActiveContract = false
	partModule = ModuleScienceLab
	}

	REQUIREMENT:NEEDS[StationScience]
{
    name = PartModuleUnlocked
    type = PartModuleUnlocked
	checkOnActiveContract = false
	partModule = StationScienceModule
}

    REQUIREMENT:NEEDS[Kerbalism]
{
    name = PartModuleUnlocked
    type = PartModuleUnlocked
    checkOnActiveContract = false
    partModule = Laboratory
}
}
REQUIREMENT
{
	name = SunCheck
	type = Expression
	expression = !@/targetBody1.IsSun()
	title = Target body must not be the Sun
}
}
	
